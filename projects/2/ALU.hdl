// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    Mux16(a=x, sel=zx, out=ZX);
    Mux16(a=y, sel=zy, out=ZY);

    Not16(in=ZX, out=NX);
    Not16(in=ZY, out=NY);

    Mux16(a=ZX, b=NX, sel=nx, out=X);
    Mux16(a=ZY, b=NY, sel=ny, out=Y);

    And16(a=X, b=Y, out=ANDXY);
    Add16(a=X, b=Y, out=ADDXY);
    Mux16(a=ANDXY, b=ADDXY, sel=f, out=FOUT);
    
    Not16(in=FOUT, out=NOUT);
    Mux16(a=FOUT, b=NOUT, sel=no, out=out, out[15]=ng,
        out=ZOUT
    );
    
    // And16Way for zr
    Not16(in=ZOUT, out=NZOUT);
    And16(a=NZOUT, b=true, 
        out[0]=zr0, out[1]=zr1, out[2]=zr2, out[3]=zr3,
        out[4]=zr4, out[5]=zr5, out[6]=zr6, out[7]=zr7,
        out[8]=zr8, out[9]=zr9, out[10]=zr10, out[11]=zr11,
        out[12]=zr12, out[13]=zr13, out[14]=zr14, out[15]=zr15
    );

    And(a=zr0, b=zr1, out=zr00);
    And(a=zr2, b=zr3, out=zr01);
    And(a=zr4, b=zr5, out=zr02);
    And(a=zr6, b=zr7, out=zr03);
    And(a=zr8, b=zr9, out=zr04);
    And(a=zr10, b=zr11, out=zr05);
    And(a=zr12, b=zr13, out=zr06);
    And(a=zr14, b=zr15, out=zr07);

    And(a=zr00, b=zr01, out=zr001);
    And(a=zr02, b=zr03, out=zr002);
    And(a=zr04, b=zr05, out=zr003);
    And(a=zr06, b=zr07, out=zr004);

    And(a=zr001, b=zr002, out=zr0001);
    And(a=zr003, b=zr004, out=zr0002);

    And(a=zr0001, b=zr0002, out=zr);
}